#!/usr/bin/env ruby

require "active_support"
require "active_support/core_ext/numeric/bytes"
require "logger"
require "opensearch/audit"
require "opensearch/cli"

logger = Logger.new($stdout)
logger.level = Logger::WARN

options = {
  logger: logger,
  min_index_size: 10.gigabytes,
  max_index_size: 50.gigabytes
}

cli = OpenSearch::CLI.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] [indices]"

  opts.separator ""
  opts.separator "Logging options:"

  opts.on("--log-level=LEVEL", [:debug, :info, :warn, :error, :fatal], "Set the log level for the output") do |level|
    options[:logger].level = level
  end

  opts.separator ""
  opts.separator "Shard size options:"

  opts.on("-p", "--profile=PROFILE", [:read, :write], "Select a workload profile (read, write)") do |profile|
    if profile == :read
      options[:min_index_size] = 10.gigabytes
      options[:max_index_size] = 30.gigabytes
    elsif profile == :write
      options[:min_index_size] = 30.gigabytes
      options[:max_index_size] = 50.gigabytes
    end
  end
end

cli.load
cli.parse!

index_param = ARGV.first || "_all"

indices_data = cli.client.cat.indices(index: index_param, format: "json", bytes: "b", s: "index")

grouped_indices = OpenSearch::Audit::IndexList.new

indices_data.each do |index_data|
  index = OpenSearch::Audit::Index.new(index_data)
  next unless index.periodic?

  grouped_indices.add(index)
end

puts "Found indices:"
grouped_indices.each do |group_name, group_indices|
  trends = [14, 7].map do |days|
    format("%<trend>9s (%<days>d days)",
      trend: ActiveSupport::NumberHelper.number_to_human_size(group_indices.median_trend(days)),
      days: days)
  end.join(", ")
  puts format("%<count>4d x %<name>-#{grouped_indices.longest_index_name}s %<median>9s [min: %<min>9s max: %<max>9s, trends: %<trends>s]\n",
    count: group_indices.count,
    name: group_name,
    median: ActiveSupport::NumberHelper.number_to_human_size(group_indices.median),
    min: ActiveSupport::NumberHelper.number_to_human_size(group_indices.min),
    max: ActiveSupport::NumberHelper.number_to_human_size(group_indices.max),
    trends: trends)
end

checker = OpenSearch::Audit::Checks::ShardSize.new(grouped_indices, options)
checker.check

mappings = cli.client.indices.get_mapping(index: index_param)
mappings.each do |index, mapping|
  grouped_indices.enrich(index, :mapping, mapping)
end

checker = OpenSearch::Audit::Checks::DynamicMapping.new(grouped_indices, options)
checker.check

checker = OpenSearch::Audit::Checks::Conflicts.new(grouped_indices, options)
checker.check

checker = OpenSearch::Audit::Checks::DoubleKeyword.new(grouped_indices, options)
checker.check

checker = OpenSearch::Audit::Checks::UnexpectedType.new(grouped_indices, options)
checker.check
